{
  "info": {
    "name": "Character Service API by UserId",
    "_postman_id": "a1b2c3d4-5678-90ab-cdef-1234567890ab",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Postman collection for Character Service using userId instead of Mongo _id."
  },
  "variable": [
    { "key": "baseUrlChar", "value": "http://localhost:4002" },
    { "key": "userId", "value": "1" },
    { "key": "roleId", "value": "4" }
  ],
  "item": [
    {
      "name": "Characters",
      "item": [
        {
          "name": "Create character",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{baseUrlChar}}/api/characters",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"name\": \"Selene\",\n  \"roleId\": {{roleId}}\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Created (201)', () => pm.response.to.have.status(201));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get characters by userId",
          "request": {
            "method": "GET",
            "url": "{{baseUrlChar}}/api/characters/user/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test('All characters belong to userId', () => {",
                  "  data.forEach(c => pm.expect(c.userId).to.eql(parseInt(pm.variables.get('userId'))));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Patch characters by userId",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{baseUrlChar}}/api/characters/user/{{userId}}",
            "body": { "mode": "raw", "raw": "{\n  \"level\": 2,\n  \"alive\": false\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get balance by userId",
          "request": {
            "method": "GET",
            "url": "{{baseUrlChar}}/api/characters/user/{{userId}}/balance"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Deduct gold by userId",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": "{{baseUrlChar}}/api/characters/user/{{userId}}/deduct-gold",
            "body": { "mode": "raw", "raw": "{\n  \"amount\": 50\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete characters by userId",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrlChar}}/api/characters/user/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 204', () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
