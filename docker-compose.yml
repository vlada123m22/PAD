services:

  mongo:
    image: mongo:6
    container_name: mongo_container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  user_service:
    image: nadea39/user-management-service:1.0
    container_name: user_service_container
    restart: always
    ports:
      - "3000:3000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/user_management
      - PORT=3000
    depends_on:
      - mongo

  db_userm_populator:
    image: nadea39/user-management-service:1.0
    container_name: db_populator_container
    environment:
      - MONGO_URI=mongodb://mongo:27017/user_management
    depends_on:
      - mongo
    command: ["node", "populate-db.js"]
    restart: "no"

  
  mongo-town:
    image: mongo:6
    container_name: mongo-town
    restart: always
    ports:
      - "27019:27017"  
    volumes:
      - mongo-town-data:/data/db

  townservice:
    image: livia994/townservice:1.0   
    container_name: townservice
    restart: always
    ports:
      - "4001:4001"
    #env_file:
     # - ./TownService.env
    depends_on:
      - mongo-town
      - db_town_populator

  db_town_populator:
    image: livia994/townservice:1.0   
    container_name: town_db_populator
    environment:
      - MONGO_URI=mongodb://mongo-town:27017/townDB
    depends_on:
      - mongo-town
    command: ["node", "PopulationScripts/TownServicePopulator.js"]
    restart: "no"


  mongo-character:
    image: mongo:6
    container_name: mongo-character
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo-character-data:/data/db

  characterservice:
    image: livia994/characterservice:1.3
    container_name: characterservice
    restart: always
    ports:
      - "4002:4002"
    #env_file:
      #- ./CharacterService.env
    depends_on:
      - mongo-character
      - db_character_populator

  db_character_populator:
    image: livia994/characterservice:1.3
    container_name: character_db_populator
    environment:
      - MONGO_URI=mongodb://mongo-character:27017/characterDB
    depends_on:
      - mongo-character
    command: ["node", "PopulationScripts/CharacterServicePopulator.js"]
    restart: "no"
  
  postgres-voting:
    container_name: postgres-voting
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: voting_service
      PGDATA: /data/postgres
    volumes:
      - postgres-voting:/data/postgres
    ports:
      - "5442:5432"  # host port 5432 → container 5432
    networks:
      - postgres-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  postgres-task:
    container_name: postgres-task
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: task_service
      PGDATA: /data/postgres
    volumes:
      - postgres-task:/data/postgres
    ports:
      - "5443:5432"  # host port 5433 → container 5432
    networks:
      - postgres-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  voting-service:
    image: vladamusin/voting-service:v2.0
    container_name: voting-service
    ports:
      - "8181:8181"
    depends_on:
      postgres-voting:
        condition: service_healthy
    networks:
      - postgres-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-voting:5432/voting_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped

  task-service:
    image: vladamusin/task-service:v2.0
    container_name: task-service
    ports:
      - "8180:8180"
    depends_on:
      postgres-task:
        condition: service_healthy
    networks:
      - postgres-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-task:5432/task_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped
    
  postgres-shop:
    image: postgres:15
    container_name: postgres-shop
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: POSTGRES_DB_SHOP
    volumes:
      - shop-postgres-data:/var/lib/postgresql/data
      - ./shop-init.sql:/docker-entrypoint-initdb.d/01-init-shop.sql
    ports:
      - "5432:5432"
    networks:
      - game-network

  postgres-roleplay:
    image: postgres:15
    container_name: postgres-roleplay
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: POSTGRES_DB_ROLEPLAY
    volumes:
      - roleplay-postgres-data:/var/lib/postgresql/data
      - ./roleplay-init.sql:/docker-entrypoint-initdb.d/01-init-roleplay.sql
    ports:
      - "5433:5432"
    networks:
      - game-network

  shop-service:
    image: catalinaernu/shopservice:1.0
    container_name: shopservice
    restart: always
    depends_on:
      - postgres-shop
    environment:
      DOTNET_ENVIRONMENT: Development
      POSTGRES_CONNECTION: "Host=postgres-shop;Port=5432;Database=POSTGRES_DB_SHOP;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    ports:
      - "5000:80"
    networks:
      - game-network

  roleplay-service:
    image: catalinaernu/roleplayservice:1.0
    container_name: roleplayservice
    restart: always
    depends_on:
      - postgres-roleplay
    environment:
      DOTNET_ENVIRONMENT: Development
      POSTGRES_CONNECTION: "Host=postgres-roleplay;Port=5432;Database=POSTGRES_DB_ROLEPLAY;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    ports:
      - "5001:80"
    networks:
      - game-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - postgres-net
    restart: unless-stopped

networks:
  postgres-net:
    driver: bridge
  game-network:
    driver: bridge

volumes:
  mongo_data:
  mongo-town-data:
  mongo-character-data:
  postgres-voting:
  postgres-task:
  shop-postgres-data:
  roleplay-postgres-data:
